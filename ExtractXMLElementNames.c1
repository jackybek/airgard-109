#include "open62541.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <libxml2/libxml/parser.h>
#include <libxml2/libxml/tree.h>
#include <libxml2/libxml/xmlreader.h>


typedef struct {
char Tag[255];
char Name[255];
float Probability;
char CASnumber[255];
int Concentration;
} AlarmStruct;

extern char SoftwareVersion[255];
extern char DataBlockVersion[255];
extern char InstrumentTime[255];
extern char MeasurementTime[255];

extern char BootStatus[255];
extern char SnapshotStatus[255];
extern char SCPStatus[255];
extern char SFTPStatus[255];
extern char RunScriptStatus[255];
extern char ArchiveStatus[255];
extern char AncillarySensorStatus[255];

extern char Sensor[255];
extern UA_Int16 OperatingTime;
extern char WarningMessage[255];

extern UA_Float IgramPP;
extern UA_Float IgramDC;
extern UA_Float LaserPP;
extern UA_Float LaserDC;
extern UA_Float SingleBeamAt900;
extern UA_Float SingleBeamAt2500;
extern UA_Int16 SignalToNoiseAt2500;
extern UA_Float CenterBurstLocation;
extern UA_Float DetectorTemp;
extern UA_Float LaserFrequency;
extern UA_Int16 HardDriveSpace;
extern UA_Float Flow;
extern UA_Float Temperature;
extern UA_Float Pressure;
extern UA_Float TempOptics;
extern UA_Int16 BadScanCounter;
extern UA_Int16 FreeMemorySpace;

extern char LABFilename[255];
extern char LOGFilename[255];
extern char LgFilename[255];
extern char SecondLgFilename[255];

extern UA_Float SystemCounter;
extern UA_Float DetectorCounter;
extern UA_Float LaserCounter;
extern UA_Float FlowPumpCounter;
extern UA_Float DesiccantCounter;

extern UA_Int16 Alarms;
extern UA_Int16 NonAlarms;

extern int NoOfAlarmsNode;
extern int NoOfNonAlarmsNode;
AlarmStruct arrayOfAlarm[255];  //101
extern char AlarmTag[255];
extern char AlarmName[255];
extern UA_Float AlarmProbability;
extern char AlarmCASnumber[255];
extern UA_Int16 AlarmConcentration;

// for pub sub use
extern UA_NodeId ds1IgramPPId;
extern UA_NodeId ds1IgramDCId;
extern UA_NodeId ds1LaserPPId;
extern UA_NodeId ds1LaserDCId;


int ExtractXMLElementNames(xmlNode* a_node);
xmlNodePtr srSeekChildNodeNamed(xmlNode* p, char* name, int len);

int ExtractXMLElementNames(xmlNode *a_node)
{
	// extract elements from XML file; this is NOT the OPCStructure

	xmlNode *curr_node = NULL;
	xmlNode *ori_node = a_node;	// keeps the pointer at the start position for seek()
	int NumOfChildNodes = 0;
	//char currentNodeName[255];
	int retval;

	char tAlarmStr[255];
	char tTagStr[255];
	char tNameStr[255];
	char tCASStr[255];
	char tConcentrationStr[255];

	char mystring[255];

	for (curr_node=a_node; curr_node;curr_node =curr_node->next)
	{
			if (curr_node->type == XML_ELEMENT_NODE)
			{
				if (strncmp(curr_node->name, "SoftwareVersion", 15) == 0)			// curr_node->name
				{
					strcpy(SoftwareVersion, (char*)xmlNodeGetContent(curr_node));
					//printf("Software Version node found : %s\n", SoftwareVersion);
				}
				else if (strncmp(curr_node->name, "DataBlockVersion", 16) == 0)
				{
					strcpy(DataBlockVersion, (char*)xmlNodeGetContent(curr_node));
					//printf("Data Block Version node found : %s\n", DataBlockVersion);
				}
				// end <Airgard> section
				else if (strncmp(curr_node->name, "InstrumentTime", 14) == 0)
				{
					strcpy(InstrumentTime, (char*)xmlNodeGetContent(curr_node));
					//printf("Instrument Time node found : %s\n", InstrumentTime);
				}
				else if (strncmp(curr_node->name, "MeasurementTime", 15) == 0)
				{
					strcpy(MeasurementTime, (char*)xmlNodeGetContent(curr_node));
					//printf("Measurement Time node found : %s\n", MeasurementTime);
				}
				// <Info> Section
                                	else if (strncmp(curr_node->name, "BootStatus",10) == 0)
                                	{
                                        	strcpy(BootStatus, (char*)xmlNodeGetContent(curr_node));
                                        	//printf("\tBootStatus node found : %s\n", BootStatus);
					}
                                        else if (strncmp(curr_node->name, "SnapshotStatus",14) == 0)
                                        {
                                                strcpy(SnapshotStatus, (char*)xmlNodeGetContent(curr_node));
                                                //printf("\tSnapshotStatus node found : %s\n", SnapshotStatus);
                                        }
                                        else if (strncmp(curr_node->name, "SCPStatus",9) == 0)
                                        {
                                                strcpy(SCPStatus, (char*)xmlNodeGetContent(curr_node));
                                                //printf("\tSCPStatus node found : %s\n", SCPStatus);
                                        }
                                        else if (strncmp(curr_node->name, "SFTPStatus",10) == 0)
                                        {
                                                strcpy(SFTPStatus, (char*)xmlNodeGetContent(curr_node));
                                                //printf("\tSFTPStatus node found : %s\n", SFTPStatus);
                                        }
                                        else if (strncmp(curr_node->name, "RunScriptStatus",15) == 0)
                                        {
                                                strcpy(RunScriptStatus, (char*)xmlNodeGetContent(curr_node));
                                                //printf("\tRunScriptStatus node found : %s\n", RunScriptStatus);
                                        }
                                        else if (strncmp(curr_node->name, "ArchiveStatus",13) == 0)
                                        {
                                                strcpy(ArchiveStatus, (char*)xmlNodeGetContent(curr_node));
                                                //printf("\tArchiveStatus node found : %s\n", ArchiveStatus);
                                        }
                                        else if (strncmp(curr_node->name, "AncillarySensorStatus",21) == 0)
                                        {
                                                strcpy(AncillarySensorStatus, (char*)xmlNodeGetContent(curr_node));
                                                //printf("\tAncillarySensorStatus node found : %s\n", AncillarySensorStatus);
                                        }
					// end <Info> Section
				else if (strncmp(curr_node->name, "Sensor", 6) == 0)
				{
					strcpy(Sensor, (char*)xmlNodeGetContent(curr_node));
					//printf("\tSensor node found : %s\n", Sensor);
				}
				else if (strncmp(curr_node->name, "OperatingTime", 13) == 0)
				{
					OperatingTime = atoi(xmlNodeGetContent(curr_node));
					//printf("\tOperatingTime node found : %d\n", OperatingTime);
				}
				else if (strncmp(curr_node->name, "WarningMessage", 14) == 0)
				{
					strcpy(WarningMessage, (char*)xmlNodeGetContent(curr_node));
					//printf("\tWarningMessage node found : %s\n", WarningMessage);
				}
				// end  <Status> Section
				else if (strncmp(curr_node->name, "IgramPP",7) == 0)
				{
					IgramPP = (UA_Float) atof(xmlNodeGetContent(curr_node));
					//printf("IgramPP node found : %f\n", IgramPP);
				}
				else if (strncmp(curr_node->name, "IgramDC", 7) == 0)
				{
					IgramDC = (UA_Float) atof(xmlNodeGetContent(curr_node));
					//printf("IgramDC node found : %f\n", IgramDC);
				}
				else if (strncmp(curr_node->name, "LaserPP",7) == 0)
				{
					LaserPP = (UA_Float) atof(xmlNodeGetContent(curr_node));
					//printf("LaserPP node found : %f\n", LaserPP);
				}
				else if (strncmp(curr_node->name, "LaserDC",7) == 0)
				{
					LaserDC = (UA_Float) atof(xmlNodeGetContent(curr_node));
					//printf("LaserDC node found : %f\n", LaserDC);
				}
				else if (strncmp(curr_node->name, "SingleBeamAt900",15) == 0)
				{
					SingleBeamAt900 = (UA_Float) atof(xmlNodeGetContent(curr_node));
					//printf("SingleBeamAt900 node found : %f\n", SingleBeamAt900);
				}
                                else if (strncmp(curr_node->name, "SingleBeamAt2500",16) == 0)
                                {
                                        SingleBeamAt2500 = (UA_Float) atof(xmlNodeGetContent(curr_node));
                                        //printf("SingleBeamAt2500 node found : %f\n", SingleBeamAt2500);
                                }
                                else if (strncmp(curr_node->name, "SignalToNoiseAt2500",19) == 0)
                                {
                                        SignalToNoiseAt2500 = (UA_Int16) atoi(xmlNodeGetContent(curr_node));
                                        //printf("SignalToNoiseAt2500 node found : %d\n", SignalToNoiseAt2500);
                                }
                                else if (strncmp(curr_node->name, "CenterBurstLocation",19) == 0)
                                {
                                        CenterBurstLocation = (UA_Float) atof(xmlNodeGetContent(curr_node));
                                        //printf("CenterBurstLocation node found : %f\n", CenterBurstLocation);
                                }
				else if (strncmp(curr_node->name, "DetectorTemp",12) == 0)
				{
					DetectorTemp = (UA_Float) atof(xmlNodeGetContent(curr_node));
					//printf("DetectorTemp node found : %f\n", DetectorTemp);
				}
                                else if (strncmp(curr_node->name, "LaserFrequency",14) == 0)
                                {
                                        LaserFrequency = (UA_Float) atof(xmlNodeGetContent(curr_node));
                                        //printf("LaserFrequency node found : %f\n", LaserFrequency);
                                }
                                else if (strncmp(curr_node->name, "HardDriveSpace",14) == 0)
                                {
                                        HardDriveSpace = (UA_Int16) atoi(xmlNodeGetContent(curr_node));
                                        //printf("HardDriveSpace node found : %d\n", HardDriveSpace);
                                }
                                else if (strncmp(curr_node->name, "Flow",4) == 0)
                                {
                                        Flow = (UA_Float) atof(xmlNodeGetContent(curr_node));
                                        //printf("Flow node found : %f\n", Flow);
                                }
                                else if (strncmp(curr_node->name, "Temperature",11) == 0)
                                {
                                        Temperature = (UA_Float) atof(xmlNodeGetContent(curr_node));
                                        //printf("Temperature node found : %f\n", Temperature);
                                }
                                else if (strncmp(curr_node->name, "Pressure",8) == 0)
                                {
                                        Pressure = (UA_Float) atof(xmlNodeGetContent(curr_node));
                                        //printf("Pressure node found : %f\n", Pressure);
                                }
                                else if (strncmp(curr_node->name, "TempOptics",10) == 0)
                                {
                                        TempOptics = (UA_Float) atof(xmlNodeGetContent(curr_node));
                                        //printf("TempOptics node found : %f\n", TempOptics);
                                }
                                else if (strncmp(curr_node->name, "BadScanCounter",14) == 0)
                                {
                                        BadScanCounter = (UA_Int16) atoi(xmlNodeGetContent(curr_node));
                                        //printf("BadScanCounter node found : %d\n", BadScanCounter);
                                }
                                else if (strncmp(curr_node->name, "FreeMemorySpace",15) == 0)
                                {
                                        FreeMemorySpace = (UA_Int16) atoi(xmlNodeGetContent(curr_node));
                                        //printf("FreeMemorySpace node found : %d\n", FreeMemorySpace);
                              	}
                                else if (strncmp(curr_node->name, "LABFilename",11) == 0)
                                {
                                        strcpy(LABFilename, xmlNodeGetContent(curr_node));
                                        //printf("LABFilename node found : %s\n", LABFilename);
                                }
                                else if (strncmp(curr_node->name, "LOGFilename",11) == 0)
                                {
                                        strcpy(LOGFilename, xmlNodeGetContent(curr_node));
                                        //printf("LOGFilename node found : %s\n", LOGFilename);
                                }
                                else if (strncmp(curr_node->name, "LgFilename",10) == 0)
                                {
                                        strcpy(LgFilename, xmlNodeGetContent(curr_node));
                                        //printf("LgFilename node found : %s\n", LgFilename);
                                }
                                else if (strncmp(curr_node->name, "SecondLgFilename",16) == 0)
                                {
                                        strcpy(SecondLgFilename, xmlNodeGetContent(curr_node));
                                        //printf("SecondLgFilename node found : %s\n", SecondLgFilename);
                                }
                                else if (strncmp(curr_node->name, "SystemCounter",13) == 0)
                                {
                                        SystemCounter = (UA_Float) atof(xmlNodeGetContent(curr_node));
                                        //printf("SystemCounter node found : %f\n", SystemCounter);
                                }
                                else if (strncmp(curr_node->name, "DetectorCounter",15) == 0)
                                {
                                        DetectorCounter = (UA_Float) atof(xmlNodeGetContent(curr_node));
                                        //printf("DetectorCounter node found : %f\n", DetectorCounter);
                                }
                                else if (strncmp(curr_node->name, "LaserCounter",12) == 0)
                                {
                                        LaserCounter = (UA_Float) atof(xmlNodeGetContent(curr_node));
                                        //printf("LaserCounter node found : %f\n", LaserCounter);
                                }
                                else if (strncmp(curr_node->name, "FlowPumpCounter",15) == 0)
                                {
                                        FlowPumpCounter = (UA_Float) atof(xmlNodeGetContent(curr_node));
                                        //printf("FlowPumpCounter node found : %f\n", FlowPumpCounter);
                                }
                                else if (strncmp(curr_node->name, "DesiccantCounter",16) == 0)
                                {
                                        DesiccantCounter = (UA_Float) atof(xmlNodeGetContent(curr_node));
                                        //printf("DesiccantCounter node found : %f\n", DesiccantCounter);
                                }
				// end <Diagnostic> section
				else if (strncmp(curr_node->name, "Alarms",6) == 0)
				{
					// here only check the node <Data>-><Alarms>
					// xmlNodeGetContent() : from libxml2
					Alarms = (UA_Int16) atoi(xmlNodeGetContent(curr_node));
					//strcpy(Alarms, xmlNodeGetContent(curr_node));
					//NoOfAlarmsNode = atoi(Alarms);
					printf("Alarms node found in extract_element_names()\n");
					printf("----No of alarms discovered : <Data> -> <Alarms>%d<Alarms>---- : %d\n", Alarms, Alarms);
				}
				else if (strncmp(curr_node->name, "NonAlarms",9) == 0)
				{
					NoOfNonAlarmsNode = (UA_Int16) atoi(xmlNodeGetContent(curr_node));
					printf("NonAlarms node found (in extract_element_names()) : %d\n", NoOfNonAlarmsNode);
                                        printf("No of non alarms subnodes : %d\n", NoOfNonAlarmsNode);

					//strcpy(NonAlarms, xmlNodeGetContent(curr_node));
					//printf("NonAlarms node found : %s\n", NonAlarms);
				}
				ExtractXMLElementNames(curr_node->children);
			}
	}

	printf("Just about to call srSeekChildNodeName() function at line 451 : No of <Alarm-N> to process: %d******************************\n", Alarms);


	//look for the first node <Alarm-1>
	//for (int i = 0; i<Alarms; i++)
	if (Alarms >= 1)
	{

                // try to search for <Alarms>
                //curr_node = srSeekChildNodeNamed(ori_node, "Alarms",6); // verified can be found
		curr_node = srSeekChildNodeNamed(ori_node, "Alarm", 5);	// ??

	/*
		// Get an array of AlarmStruct based on the total number of Alarms node
                AlarmStruct RetStruct[4]; // maximum number of GAS alarms at any one time is 4

		switch (Alarms)
		{
		case 1:
	   	// in the xml there is no "Alarm-1","Tag-1","Name-1", "Probability-1", "CASnumber-1", "Concentration-1",  only "Alarm","Tag","Name","Probability","CASnumber","Concentration"
		// look for the first node with <Tag>, this will be saved to UA address as <Tag-1>
		curr_node = srSeekChildNodeNamed(ori_node, "Tag",3);
		// extract the attribute value and save to RetStruct
		strcpy(RetStruct[0].Tag, xmlNodeGetContent(curr_node));

		// then look for Name and saved to UA address as Name-1
		curr_node = srSeekChildNodeNamed(ori_node, "Name",4);
		strcpy(RetStruct[0].Name, xmlNodeGetContent(curr_node));
		// then look for Probability and saved to UA address as Probability-1
		curr_node = srSeekChildNodeNamed(ori_node, "Probability", 11);
		RetStruct[0].Probability = (UA_Float)atof(xmlNodeGetContent(curr_node));
		// look for CASnumber and saved to UA address as CASnumber-1
                curr_node = srSeekChildNodeNamed(ori_node, "CASnumber", 9);
                strcpy(RetStruct[0].CASnumber,(char*)xmlNodeGetContent(curr_node));
		// look for Concentration and saved to UA address as Concentration-1
                curr_node = srSeekChildNodeNamed(ori_node, "Concentration", 13);
                RetStruct[0].Concentration = (UA_Float)atof(xmlNodeGetContent(curr_node));
 
				printf("Alarm-%d", i);
                                printf("\t<Tag>%s</Tag>\n", RetStruct[0]->Tag);
                                printf("\t<Name>%s</Name>\n",  RetStruct[0]->Name);
                                printf("\t<CASnumber>%s</CASnumber>\n", RetStruct[0]->CASnumber);
                                printf("\t<Probability>%0.2f</Probability>\n", RetStruct[0]->Probability);
                                printf("\t<Concentration>%d</Concentration>\n", RetStruct[0]->Concentration);
                                printf("\t---------------------------------\n");


		break;

		default:
		break;
		}

	*/
		//srSeekChildNodeNamed(*RetStruct, ori_node, "Alarm", strlen("Alarm"), Alarms); //Tag; pass in Alarms to tell srSeekChildNodeNamed() to advance beyond Alarm-1
		/*
		for (int i=0; i< Alarms; i++)
			{
				//printf("Seek Tag content: Contents of xmlNodeGetContent(curr_node) is %s\n", (char*)xmlNodeGetContent(curr_node));
			        printf("Alarm-%d", i);
	                        printf("\t<Tag-%d>%s</Tag>\n", i+1,RetStruct[i]->Tag);
                        	printf("\t<Name-%d>%s</Name>\n", i+1, RetStruct[i]->Name);
				printf("\t<CASnumber-%d>%s</CASnumber>\n", i+1, RetStruct[i]->CASnumber);
                        	printf("\t<Probability>%0.2f</Probability>\n", RetStruct[i]->Probability);
                        	printf("\t<Concentration>%d</Concentration>\n", RetStruct[i]->Concentration);
				printf("\t---------------------------------\n");
			}
		*/
		// try this first - this is working
		/*
		int i, prefix=0, posfix, Concentration;
		float Probability;
		char Tag[255], Name[255],CASnumber[255];

		curr_node = srSeekChildNodeNamed(ori_node, "NonAlarm", 8);
		xmlNodePtr p_AlarmNode = curr_node;	// new pointer to traverse forward to get all the subnodes Alarm->struct
		sIn for loop scanf((char*)xmlNodeGetContent(curr_node), "%d %s %s %f %s %d %d", &prefix, &Tag, &Name, &Probability, &CASnumber, &Concentration, &posfix);;
		printf("Alarm-%d", prefix);
		printf("\t<Tag-%d>%s</Tag>\n",i+1,Tag);
		printf("\t<Name-%d>%s</Name>\n",i+1, Name);
		printf("\t<Probability>%0.2f</Probability>\n", Probability);
		printf("\t<Concentration>%d</Concentration>\n", Concentration);
		*/

	}

	     // - need to trarvse through to get the subcomponents of AlarmStruct
		// global variable - arrayOfAlarm
		//arrayOfAlarm = malloc(NoOfAlarmsNode * sizeof(AlarmStruct*));
	     /*
		for (int i=0; i<NoOfAlarmsNode;i++)
		{
			printf("Entering transfer loop \n");
			arrayOfAlarm[i] = malloc(sizeof(AlarmStruct));
			strcpy(arrayOfAlarm[i]->Tag, xmlNodeGetContent(p_AlarmNode));
			strcpy(arrayOfAlarm[i]->Name, xmlNodeGetContent(p_AlarmNode));
			arrayOfAlarm[i]->Concentration = xmlNodeGetContent(p_AlarmNode);
			strcpy(arrayOfAlarm[i]->CASnumber, xmlNodeGetContent(p_AlarmNode));
			arrayOfAlarm[i]->Probability = xmlNodeGetContent(p_AlarmNode));

			p_AlarmNode = p_AlarmNode->next;

		}
	     */
		// OPC UA Address space will be extended in run_UA_Client() after extract_element_names() completes

	//else
	//	printf("!!!!!!!!!!Cannot find node: Data->Alarm-1 !!!!!!!!!!!!\n");
	/*
	curr_node = srSeekChildNodeNamed(ori_node,"NonAlarm",8);
	if (curr_node != NULL)
	{
		NoOfNonAlarmsNode = (UA_Int16) atoi(xmlNodeGetContent(curr_node));
		printf("Non Alarms node found\n");
		printf("No of non alarms subnodes %d\n", NoOfNonAlarmsNode);

		// globle variable - arrayOfNonAlarm
		//arrayOfNonAlarm = malloc(NoOfNonAlarmsNode * sizeof(NonAlarmStruct*));

	}
	*/
	//printf("----------end extract_element_names()-------------------\n");

} // End extract_element_names()
