#include "open62541.h"
#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <stdio.h>
#include <errno.h>
#include <string.h>
#include <netdb.h>
#include <netinet/in.h>
#include <sys/socket.h>
#include <unistd.h>
#include <pthread.h>

#define UA_ENABLE_HISTORIZING
#define UA_ENABLE_DISCOVERY

#define MANUFACTURER_NAME "Virtual Skies"
#define PRODUCT_URI "http://virtualskies.com.sg"
#define APPLICATION_NAME "Airgard OPCUA adaptor based on open62541"
#define APPLICATION_URI "urn:virtualskies.com.sg"
#define APPLICATION_URI_SERVER "urn:virtualskies.server.application"
#define PRODUCT_NAME "Virtual Skies OPC UA Server"
#define STRINGIFY(arg) #arg
#define VERSION(MAJOR, MINOR, PATCH, LABEL) \
    STRINGIFY(MAJOR) "." STRINGIFY(MINOR) "." STRINGIFY(PATCH) LABEL

#define PRIVATEKEYLOC "/usr/local/ssl/private/private-key.pem"
#define SSLCERTIFICATELOC "/etc/ssl/certs/62541ServerCert.pem"
#define TRUSTLISTLOC "/usr/local/ssl/trustlist/trustlist.crl"

/* Struct initialization works across ANSI C/C99/C++ if it is done when the
 * variable is first declared. Assigning values to existing structs is
 * heterogeneous across the three. */
static UA_INLINE UA_UInt32Range
UA_UINT32RANGE(UA_UInt32 min, UA_UInt32 max) {
    UA_UInt32Range range = {min, max};
    return range;
}

static UA_INLINE UA_DurationRange
UA_DURATIONRANGE(UA_Duration min, UA_Duration max) {
    UA_DurationRange range = {min, max};
    return range;
}


void* StartOPCUAServer(void* x_void_ptr, char *ipaddress);
UA_ByteString loadFile(const char *const path);
static UA_Boolean allowAddNode(UA_Server *server, UA_AccessControl *ac,
                const UA_NodeId *sessionId, void *sessionContext,
                const UA_AddNodesItem *item);
static UA_Boolean allowDeleteNode(UA_Server *server, UA_AccessControl *ac,
                const UA_NodeId *sessionId, void *sessionContext,
                const UA_DeleteNodesItem *item);
static UA_Boolean allowBrowseNode(UA_Server *server, UA_AccessControl *ac,
                const UA_NodeId *sessionId, void *sessionContext,
                const UA_NodeId *nodeId, void *nodeContext);

#ifdef UA_ENABLE_HISTORIZING
static UA_Boolean allowHistoryUpdateUpdateData(UA_Server *server, UA_AccessControl *ac,
		const UA_NodeId *sessionId, void *sessionContext,
		const UA_NodeId *nodeId,
		UA_PerformUpdateType performInsertReplace,
		const UA_DataValue *value);
#endif

static volatile UA_Boolean running = true;
extern int g_argc;

// sample found in /open62541/examples/common.h
// parses the certificate file - used in StartOPCUAServer.c
UA_ByteString loadFile(const char *const path)
{
    UA_ByteString fileContents = UA_STRING_NULL;

    /* Open the file */
    FILE *fp = fopen(path, "rb");
    if(!fp) {
        errno = 0; /* We read errno also from the tcp layer... */
        return fileContents;
    }

    /* Get the file length, allocate the data and read */
    fseek(fp, 0, SEEK_END);
    fileContents.length = (size_t)ftell(fp);
    fileContents.data = (UA_Byte *)UA_malloc(fileContents.length * sizeof(UA_Byte));
    if(fileContents.data) {
        fseek(fp, 0, SEEK_SET);
        size_t read = fread(fileContents.data, sizeof(UA_Byte), fileContents.length, fp);
        if(read != fileContents.length)
            UA_ByteString_clear(&fileContents);
    } else {
        fileContents.length = 0;
    }
    fclose(fp);

    return fileContents;
}


static void stopHandler(int sig)
{
	UA_LOG_INFO(UA_Log_Stdout, UA_LOGCATEGORY_USERLAND, "received ctrl-c");
	running = false;
}

static UA_Boolean
allowAddNode(UA_Server *server, UA_AccessControl *ac,
		const UA_NodeId *sessionId, void *sessionContext,
		const UA_AddNodesItem *item)
{
	printf("Called allowAddNode \n");
	return UA_TRUE;
}

static UA_Boolean
allowDeleteNode(UA_Server *server, UA_AccessControl *ac,
		const UA_NodeId *sessionId, void *sessionContext,
		const UA_DeleteNodesItem *item)
{
	printf("Called allowDeleteNode \n");
	return UA_TRUE;
}

static UA_Boolean
allowBrowseNode(UA_Server *server, UA_AccessControl *ac,
                const UA_NodeId *sessionId, void *sessionContext,
                const UA_NodeId *nodeId, void *nodeContext)
{
        printf("Called allowBrowseNode \n");
        return UA_TRUE;
}

static UA_Boolean allowHistoryUpdateUpdateData(UA_Server *server, UA_AccessControl *ac,
                const UA_NodeId *sessionId, void *sessionContext,
                const UA_NodeId *nodeId,
                UA_PerformUpdateType performInsertReplace,
                const UA_DataValue *value)
{
	printf("Called allowHistoryUpdateUpdateData \n");
	return UA_TRUE;
}


// global variable //
static const size_t usernamePasswordsSize = 2;
static UA_UsernamePasswordLogin logins[2] = {
        {UA_STRING_STATIC("jackybek"), UA_STRING_STATIC("thisisatestpassword24")},
	{UA_STRING_STATIC("admin"),UA_STRING_STATIC("defaultadminpassword24")}
};

//================================================================
static UA_StatusCode
createEndpoint(UA_ServerConfig *conf, UA_EndpointDescription *endpoint,
               const UA_SecurityPolicy *securityPolicy,
               UA_MessageSecurityMode securityMode)
{
    UA_EndpointDescription_init(endpoint);

    endpoint->securityMode = securityMode;
    UA_String_copy(&securityPolicy->policyUri, &endpoint->securityPolicyUri);
    endpoint->transportProfileUri =
        UA_STRING_ALLOC("http://opcfoundation.org/UA-Profile/Transport/uatcp-uasc-uabinary");

    /* Add security level value for the corresponding message security mode */
    endpoint->securityLevel = (UA_Byte) securityMode;
    UA_String_copy(&securityPolicy->policyUri, &endpoint->securityPolicyUri);
    endpoint->transportProfileUri =
        UA_STRING_ALLOC("http://opcfoundation.org/UA-Profile/Transport/uatcp-uasc-uabinary");

    /* Add security level value for the corresponding message security mode */
    endpoint->securityLevel = (UA_Byte) securityMode;

    /* Enable all login mechanisms from the access control plugin  */
    UA_StatusCode retval = UA_Array_copy(conf->accessControl.userTokenPolicies,
                                         conf->accessControl.userTokenPoliciesSize,
                                         (void **)&endpoint->userIdentityTokens,
                                         &UA_TYPES[UA_TYPES_USERTOKENPOLICY]);

    	if(retval != UA_STATUSCODE_GOOD)
	{
        	UA_String_clear(&endpoint->securityPolicyUri);
        	UA_String_clear(&endpoint->transportProfileUri);
        	return retval;
    	}
    	endpoint->userIdentityTokensSize = conf->accessControl.userTokenPoliciesSize;

    	UA_String_copy(&securityPolicy->localCertificate, &endpoint->serverCertificate);
    	UA_ApplicationDescription_copy(&conf->applicationDescription, &endpoint->server);

    	return UA_STATUSCODE_GOOD;
}



//================================================================
void* StartOPCUAServer(void* x_void_ptr, char* ipaddress)
{
	int sockfd;

	signal(SIGINT, stopHandler);
	signal(SIGTERM, stopHandler);

	UA_LOG_INFO(UA_Log_Stdout, UA_LOGCATEGORY_USERLAND,"In StartOPCUAServer thread: g_argc=%d\n", g_argc);

	//UA_Server* uaServer = (UA_Server*)x_void_ptr; -- caused it to crash when UA_newWithConfig(config);
	//UA_ServerConfig *config = UA_Server_getConfig(uaServer);

	UA_Server *uaServer1 = NULL;

	UA_ServerConfig config1;
	memset(&config1, 0, sizeof(UA_ServerConfig));

	if (g_argc == 2)
	{
		/*
			  #ifdef UA_ENABLE_PUBSUB
				// Details about the connection configuration and handling are located in
					//  the pubsub connection tutorial
				printf("\t----------------------Before setupUadpRange----------------- \n");
				//   setupUadpRange(server);
			  #endif
		*/
		//hostname or ip address available
			//copy the hostname from char * to an open62541 variable
		//printf("in g_argc segment %s %d\n", g_argv_ip, g_argv_port);

		char* OPCUAServerIP = ipaddress;
		UA_String hostname;
		UA_String_init(&hostname);
		//hostname.length = strlen(g_argv[1]);
		//hostname.data = (UA_Byte *) g_argv[1];
		//hostname.length = strlen(g_argv_ip);
		//hostname.data = (UA_Byte *) g_argv_ip; // this should be the ipaddress of the OPCUA Server : 192.168.2.33

		hostname.data = (UA_Byte*)OPCUAServerIP;

		//Change the configuration - deprecated in v1.1.3
		//UA_ServerConfig_setCustomHostname(config, hostname);
		//printf("hostname.data (ip) = %s\n", hostname.data);

		//#endif


		UA_StatusCode retval;

	// encryption routine
    		/* Load certificate and private key */
		UA_ByteString certificate = loadFile(SSLCERTIFICATELOC);
		//UA_ByteString certificate = loadFile("/etc/ssl/certs/62541ServerCert.pem");	// => symbolic link
   		//UA_ByteString certificate = loadFile("/usr/local/ssl/certs/62541ServerCert.pem");  // actual location
		if (certificate.length == 0)
			goto cleanup;
 
    		UA_ByteString privateKey = loadFile(PRIVATEKEYLOC);
    		//UA_ByteString privateKey = loadFile("/usr/local/ssl/private/private-key.pem");
		if (privateKey.length == 0)
			goto cleanup;

		UA_LOG_INFO(UA_Log_Stdout, UA_LOGCATEGORY_USERLAND,"StartOPCUAServer.c : after loading certificate and privateKey");

    		/* Load the trustlist */
    		size_t trustListSize = 0;
    		UA_STACKARRAY(UA_ByteString, trustList, trustListSize);
    		for(size_t i = 0; i < trustListSize; i++)
        		trustList[i] = loadFile(TRUSTLISTLOC); //"/usr/local/ssl/trustlist/trustlist.crl");

    		/* Loading of a issuer list, not used in this application */
    		size_t issuerListSize = 0;
    		UA_ByteString *issuerList = NULL;

    		/* Loading of a revocation list currently unsupported */
    		UA_ByteString *revocationList = NULL;
    		size_t revocationListSize = 0;

    		retval = UA_ServerConfig_setDefaultWithSecurityPolicies(&config1, 4840,			// swap config with config1
                                                       &certificate, &privateKey,
                                                       trustList, trustListSize,
                                                       issuerList, issuerListSize,
                                                       revocationList, revocationListSize);

                // refer to open62541.org->Server->Server Configuration & plugins/ua_config_default for the list of members in the UA_ServerConfig structure
		if (!&config1)
		{
			//return UA_STATUSCODE_BADINVALIDARGUMENT;
			goto cleanup;
		}
		if (config1.nodestore.context == NULL)
			UA_Nodestore_HashMap(&config1.nodestore);

		//if (!config1.logger.log)
		//	config1.logger = UA_Log_Stdout;

                config1.shutdownDelay = 5000.0; // millisecond
                config1.securityPolicyNoneDiscoveryOnly = UA_TRUE;
 		config1.serverCertificate = certificate;

		// Server Description
		UA_BuildInfo_clear(&config1.buildInfo);
		config1.buildInfo.productUri = UA_STRING_ALLOC(PRODUCT_URI);
		config1.buildInfo.manufacturerName = UA_STRING_ALLOC(MANUFACTURER_NAME);
		config1.buildInfo.productName = UA_STRING_ALLOC(PRODUCT_NAME);
		config1.buildInfo.softwareVersion =
			UA_STRING_ALLOC(VERSION(UA_OPEN62541_VER_MAJOR, UA_OPEN62541_VER_MINOR,
						UA_OPEN62541_VER_PATCH, UA_OPEN62541_VER_LABEL));

		config1.buildInfo.buildDate = UA_DateTime_now();
		config1.buildInfo.buildNumber = UA_STRING_ALLOC(__DATE__ " " __TIME__);

		UA_ApplicationDescription_clear(&config1.applicationDescription);
                config1.applicationDescription.applicationUri = UA_STRING_ALLOC(APPLICATION_URI);
		config1.applicationDescription.productUri = UA_STRING_ALLOC(PRODUCT_URI);
		config1.applicationDescription.applicationName = UA_LOCALIZEDTEXT_ALLOC("en", APPLICATION_NAME);
		config1.applicationDescription.applicationType = UA_APPLICATIONTYPE_SERVER;
	    	/* conf->applicationDescription.gatewayServerUri = UA_STRING_NULL; */
    		/* conf->applicationDescription.discoveryProfileUri = UA_STRING_NULL; */
    		/* conf->applicationDescription.discoveryUrlsSize = 0; */
    		/* conf->applicationDescription.discoveryUrls = NULL; */

		UA_LOG_INFO(UA_Log_Stdout, UA_LOGCATEGORY_USERLAND, "StartOPCUAServer.c : after making changes to config1");

		// Certificate Verification that accepts every certificate. Can be
	     	// overwritten when the policy is specialized.
		UA_CertificateVerification_AcceptAll(&config1.certificateVerification);

		// Limits for SecureChannels
		config1.maxSecureChannels = 40;
		config1.maxSecurityTokenLifetime = 10 * 60 * 1000; // 10 minutes */

		// Limits for Sessions
		config1.maxSessions = 100;
		config1.maxSessionTimeout = 60 * 60 * 1000;	// 1 hour

		// Limits for MonitoredItems
		config1.samplingIntervalLimits = UA_DURATIONRANGE(50.0, 24.0 * 3600.0 * 1000.0);
		config1.queueSizeLimits = UA_UINT32RANGE(1, 100);

		// Limits for Discovery
		//config1.discoveryCleanupTimeout = 60 * 60;

		UA_ByteString_clear(&certificate);
    		UA_ByteString_clear(&privateKey);
    		for(size_t i = 0; i < trustListSize; i++)
        		UA_ByteString_clear(&trustList[i]);
	// end encryption routine

	// add userid and password routine
		// disable anonymous logins, enable 2 user/password logins
		config1.accessControl.clear(&config1.accessControl);
		retval = UA_AccessControl_default(&config1, false, &config1.securityPolicies[config1.securityPoliciesSize-1].policyUri, 2, logins);
		if (retval != UA_STATUSCODE_GOOD)
			goto cleanup;

		// set accessControl functions for nodeManagement
		config1.accessControl.allowAddNode = allowAddNode;
		config1.accessControl.allowDeleteNode = allowDeleteNode;
		config1.accessControl.allowBrowseNode = allowBrowseNode;
	// end userid and password routine

	/*
		#ifdef UA_ENABLE_PUBSUB
					printf("\tJust about to start the OPCUA Server UADP thread\n");

					// start OPCUA Server
					UA_LOG_INFO(UA_Log_Stdout, UA_LOGCATEGORY_USERLAND, "starting server...");

					retval = UA_Server_run(server, &running); // blocking call - to test United Automation (ok)
					if(retval != UA_STATUSCODE_GOOD)
							goto cleanup;
		#else
	*/
	// start OPCUA Server
	UA_LOG_INFO(UA_Log_Stdout, UA_LOGCATEGORY_USERLAND, "starting OPCUA server ...\n");

	uaServer1 = UA_Server_newWithConfig(&config1);

        //Add a new namespace to the server
        UA_Int16 ns_MKS = UA_Server_addNamespace(uaServer1, "MKS");
        UA_LOG_INFO(UA_Log_Stdout, UA_LOGCATEGORY_USERLAND, "New Namespace added with Nr. %d \n", ns_MKS);
	retval = UA_Server_run(uaServer1, &running);
	if (retval != UA_STATUSCODE_GOOD)
		goto cleanup;
	else
		UA_LOG_INFO(UA_Log_Stdout, UA_LOGCATEGORY_USERLAND, "OPCUA server started successfully ...\n");

	//	#endif
	}

cleanup:
	UA_LOG_INFO(UA_Log_Stdout, UA_LOGCATEGORY_USERLAND, "OPCUA Server was unexpectedly shut down");
	if (uaServer1)	// (uaServer)
		UA_Server_delete(uaServer1); // UA_Server_delete(uaServer);
	else
		UA_ServerConfig_clean(&config1); // UA_ServerConfig_clean(config);

	close(sockfd);
	//return retval == UA_STATUSCODE_GOOD ? EXIT_SUCCESS : EXIT_FAILURE;
//#endif
}


